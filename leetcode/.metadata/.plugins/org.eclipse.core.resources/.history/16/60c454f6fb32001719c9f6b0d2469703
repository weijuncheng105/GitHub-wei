import java.util.LinkedList;

//参考 http://www.cnblogs.com/byrhuangqiang/p/4806664.html
//实现Trie树这个数据结构来解决该问题;

class TrieNode{
	char content;
	boolean isleaf;
	LinkedList<TrieNode> childlist;
	
	public TrieNode(){
		content = 0;
		isleaf = false;
		childlist = new LinkedList<TrieNode>(); 
	}
	
	public TrieNode(char content){
		this.content = content;
		this.isleaf = false;
		this.childlist = new LinkedList<>();
	}
	
	public TrieNode subTrieNode(char c){
		for(TrieNode tn:childlist){
			if(tn.content==c)
				return tn;
		}
		return null;
	}
}

public class WordDictionary {

	TrieNode root;
	
	/** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        if(search(word))
        	return;
        int len = word.length();
        TrieNode cur = root;
        for(int i = 0;i<len;i++){
        	char c = word.charAt(i);
        	if(cur.subTrieNode(c)!=null){
        		cur = cur.subTrieNode(c); 
        	}
        	else{
        		TrieNode tmp =  new TrieNode(c);
        		cur.childlist.add(tmp);
        		cur = tmp;
        	}
        }
        cur.isleaf = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return dfs(root,word,0);
    }
	
	public boolean dfs(TrieNode root,String word,int start){
		int len = word.length();
		if(start==len){
			if(root.isleaf==false)
				return false;
			else
				return true;
		}
		char c = word.charAt(start);
		if(c!='.'){
			TrieNode tmp = root.subTrieNode(c);
			if(tmp==null) return false;
			else
				return dfs(tmp,word,start+1);
		}
		else{
			for(TrieNode tn:root.childlist){
				boolean found = dfs(tn,word,start+1);
				if(found)
					return true;
			}
			return false;
		}
	}
    
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 WordDictionary wordDictionary = new WordDictionary();
	     wordDictionary.addWord("bad");
	     wordDictionary.addWord("dad");
	     wordDictionary.addWord("add");
	     boolean res = wordDictionary.search(".ad");
	     System.out.println(res);
	}

}
